#
Input: 'arr' = [0,1,1,5] , 'k' = 1

Output: 1 2

Explanation:
If 'arr' = [0, 1, 1, 5] and 'k' = 1, then the first and last occurrence of 1 will be 1(0 - indexed) and 2.


Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1:
8 2
0 0 1 1 2 2 2 2


Sample output 1:
4 7


Explanation of Sample output 1:
For this testcase the first occurrence of 2 in at index 4 and last occurrence is at index 7.


Sample Input 2:
4 2
1 3 3 5


Sample output 2:
-1 -1


Expected Time Complexity:
Try to do this in O(log(n)).


Constraints:
1 <= n <= 10^5
0 <= k <= 10^9
0 <= arr[i] <= 10^9

Time Limit : 1 second


solution :-
  
  int firstocc(vector<int>& arr,int n, int k){

    int s=0, e= n-1;
    int mid =s+(e-s)/2;
    int ans= -1;
    while(s<=e){
        if(arr[mid]==k){
            ans=mid;
            e=mid-1;
        }
        else if(k>arr[mid]){
            //right shift
            s=mid+1;
        }
        else if(k<arr[mid]){
            //left shift
            e=mid-1;
        }
        mid=s+(e-s)/2;
    }
    return ans;
}

int lastOcc(vector<int>& arr,int n,int k){
     int s=0,e=n-1;
     int mid =s+(e-s)/2;
     int ans=-1;
     while(s<=e){
         if (arr[mid]==k){
             ans=mid;
             s=mid+1;

         }
         else if(k>arr[mid]){
             s=mid+1;
         }
         
          else if (k < arr[mid]) {
             s = mid - 1;
         }
         mid=s+(e-s)/2;
     }
     return ans;
}


pair<int, int> firstAndLastPosition(vector<int>& arr, int n, int k)
{
    pair<int,int>p;
    p.first=firstocc(arr,n,k);
    p.second=lastOcc(arr,n,k);


    return p;
    
    
    // Write your code here
}
